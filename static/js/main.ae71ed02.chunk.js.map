{"version":3,"sources":["Square.tsx","Row.tsx","Board.tsx","HistoricalMove.tsx","Game.tsx","index.tsx"],"names":["Square","handleClick","value","className","onClick","Row","props","squares","row","map","renderSquare","bind","renderSquares","square","index","key","handleSquareClick","Board","cells","useState","array","size","chunked","length","push","slice","chunk","boardRows","HistoricalMove","move","description","INITIAL_BOARD","Array","fill","CELLS","from","keys","LINES","Object","freeze","Game","initialHistory","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","currentMove","status","winner","calculateWinner","nextPlayer","getStatus","moves","_move","handleHistoricalMoveClick","jumpTo","currentHistory","concat","i","len","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"uMASO,SAASA,EAAT,GAAgD,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,MACpC,OACE,4BAAQC,UAAU,SAASC,QAASH,GACjCC,GCDA,SAASG,EAAIC,GAClB,IAAMC,EAWR,YAA6E,IAApDC,EAAmD,EAAnDA,IAAKD,EAA8C,EAA9CA,QAASN,EAAqC,EAArCA,YACrC,OAAOO,EAAIC,IAAIC,EAAaC,KAAK,KAAMJ,EAASN,IAZjBW,CAAcN,GAE7C,OACE,yBAAKH,UAAU,aACZI,GAWP,SAASG,EACPH,EACAN,EACAY,EACAC,GAEA,IAAMC,EAAW,iBAAaD,GACxBZ,EAAwBK,EAAQM,GAChCG,EAAwCf,EAAYY,GAE1D,OACE,kBAACb,EAAD,CACEe,IAAKA,EACLb,MAAOA,EACPD,YAAae,IC9BZ,SAASC,EAAT,GAAqE,IAApDC,EAAmD,EAAnDA,MAAOX,EAA4C,EAA5CA,QAASN,EAAmC,EAAnCA,YAAmC,EACvCkB,mBAuBpC,SAAeC,EAAiBC,GAC9B,IAAMC,EAAsB,GACxBR,EAAgB,EAEpB,KAAOA,EAAQM,EAAMG,QACnBD,EAAQE,KAAKJ,EAAMK,MAAMX,EAAOO,EAAOP,IACvCA,GAASO,EAGX,OAAOC,EAhCgDI,CAAM,YAAIR,GAAQ,IACnES,EAFmE,oBAEnClB,IAQtC,SAAwBD,EAAeM,GACrC,OACE,kBAACT,EAAD,CACEU,IAAKD,EACLN,IAAKA,EACLD,QAASA,EACTN,YAAaA,KAdsCU,KAAK,OAE9D,OACE,6BACGgB,GCRA,SAASC,EAAT,GAAoE,IAA1CC,EAAyC,EAAzCA,KAAM5B,EAAmC,EAAnCA,YAC/B6B,EAAsBD,EAAO,eAAiBA,EAAO,mBAE3D,OACE,4BACE,4BAAQzB,QAASH,GACd6B,ICHT,IAAMC,EAAkCC,MAAM,GAAGC,KAAK,MAChDC,EAAkBF,MAAMG,KAAKJ,EAAcK,QAC3CC,EAA8BC,OAAOC,OAAO,CAChD,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGF,SAASC,IACd,IAAMC,EAAiB,CAAC,CAAElC,QAASwB,IADD,EAGhCZ,mBAAkBsB,GAHc,mBAE3BC,EAF2B,KAElBC,EAFkB,OAIiBxB,mBAAiB,GAJlC,mBAI3ByB,EAJ2B,KAIfC,EAJe,OAKY1B,oBAAkB,GAL9B,mBAK3B2B,EAL2B,KAKlBC,EALkB,KAM5BC,EAAoBN,EAAQE,GAC5BK,EAuER,WAAsCH,GAA2B,IAE3DG,EADEC,EAA4BC,EAD4B,EAA3C5C,SAKjB0C,EADEC,EACI,kBAAcA,GAEd,uBAAmBE,EAAWN,IAGtC,OAAOG,EAjFgBI,CAAUL,EAAaF,GACxCvC,EAA4ByC,EAAYzC,QACxC+C,EAAuBZ,EAAQjC,IAqCrC,SAA8B8C,EAAazC,GACzC,IAAM0C,EAWR,SAAgB1C,GACd,OAAO,WACL+B,EAAc/B,GACdiC,EAAWjC,EAAQ,IAAM,IAd2B2C,CAAO3C,GAE7D,OACE,kBAACc,EAAD,CACEb,IAAKD,EACLe,KAAMf,EACNb,YAAauD,KA5C2C7C,KAAK,OAEnE,OACE,yBAAKR,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACc,EAAD,CACEC,MAAOgB,EACP3B,QAASA,EACTN,YAYR,SAAqBY,GACnB,OAAO,WACL,IAAM6C,EAA0BhB,EAAQjB,MAAM,EAAGmB,EAAa,GAExDrC,EADoBmD,EAAeA,EAAenC,OAAS,GACnBhB,QAAQkB,QAElD0B,EAAgB5C,IAAYA,EAAQM,KAGxCN,EAAQM,GAAUuC,EAAWN,GAE7BH,EAAWe,EAAeC,OAAO,CAAC,CAAEpD,QAASA,MAC7CsC,EAAca,EAAenC,QAC7BwB,GAAW,SAACD,GAAD,OAAcA,WAtBzB,yBAAK3C,UAAU,aACb,6BAAM8C,GACN,4BAAKK,KA8Cb,SAASH,EAAgB5C,GACvB,IAAK,IAAIqD,EAAY,EAAGC,EAAMxB,EAAMd,OAAQqC,EAAIC,EAAKD,IAAK,CAAC,IAAD,cAC5BvB,EAAMuB,GADsB,GACjDE,EADiD,KAC9CC,EAD8C,KAC3CC,EAD2C,KAExD,GAAIzD,EAAQuD,IAAMvD,EAAQuD,KAAOvD,EAAQwD,IAAMxD,EAAQuD,KAAOvD,EAAQyD,GACpE,OAAOzD,EAAQuD,GAGnB,OAAO,KAgBT,SAASV,EAAWN,GAClB,OAAOA,EAAU,IAAM,IChHzBmB,IAASC,OACP,kBAAC1B,EAAD,MACA2B,SAASC,eAAe,U","file":"static/js/main.ae71ed02.chunk.js","sourcesContent":["import React from \"react\";\nimport { SquareOccupant } from \"./Game\";\nimport { HandleMouseClickFn } from \"./Types\";\n\ntype Props = {\n  handleClick: HandleMouseClickFn,\n  value: SquareOccupant\n};\n\nexport function Square({ handleClick, value }: Props) {\n  return (\n    <button className=\"square\" onClick={handleClick}>\n      {value}\n    </button>\n  );\n}\n","import React from \"react\";\nimport { SquareOccupant, HandleClickFn } from \"./Game\";\nimport { Square } from \"./Square\";\nimport { HandleMouseClickFn } from \"./Types\";\n\ntype Props = {\n  row: number[],\n  squares: SquareOccupant[],\n  handleClick: HandleClickFn\n};\n\nexport function Row(props: Props): JSX.Element {\n  const squares: JSX.Element[] = renderSquares(props);\n\n  return (\n    <div className=\"board-row\">\n      {squares}\n    </div>\n  );\n}\n\n// PRIVATE\n\nfunction renderSquares({ row, squares, handleClick }: Props): JSX.Element[] {\n  return row.map(renderSquare.bind(null, squares, handleClick));\n}\n\nfunction renderSquare(\n  squares: SquareOccupant[],\n  handleClick: HandleClickFn,\n  square: number,\n  index: number\n): JSX.Element {\n  const key: string = `square-${index}`;\n  const value: SquareOccupant = squares[square];\n  const handleSquareClick: HandleMouseClickFn = handleClick(square);\n\n  return (\n    <Square\n      key={key}\n      value={value}\n      handleClick={handleSquareClick}\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport { Row } from \"./Row\";\nimport { SquareOccupant, HandleClickFn } from \"./Game\";\nimport { Hooks } from \"./Types\";\n\ntype Props = {\n  cells: number[],\n  squares: SquareOccupant[],\n  handleClick: HandleClickFn\n};\n\nexport function Board({ cells, squares, handleClick }: Props): JSX.Element {\n  const [rows]: Hooks<number[][]> = useState<number[][]>(chunk([...cells], 3));\n  const boardRows: JSX.Element[] = rows.map(renderBoardRow.bind(null));\n\n  return (\n    <div>\n      {boardRows}\n    </div>\n  );\n\n  function renderBoardRow(row: number[], index: number): JSX.Element {\n    return (\n      <Row\n        key={index}\n        row={row}\n        squares={squares}\n        handleClick={handleClick}\n      />\n    );\n  }\n}\n\n// PRIVATE\n\nfunction chunk(array: number[], size: number): number[][] {\n  const chunked: number[][] = [];\n  let index: number = 0;\n\n  while (index < array.length) {\n    chunked.push(array.slice(index, size + index));\n    index += size;\n  }\n\n  return chunked;\n}\n","import React from \"react\";\nimport { HandleMouseClickFn } from \"./Types\";\n\ntype Props = {\n  key: number,\n  move: number,\n  handleClick: HandleMouseClickFn\n}\n\nexport function HistoricalMove({ move, handleClick }: Props): JSX.Element {\n  const description: string = move ? \"Go to move #\" + move : \"Go to game start\";\n\n  return (\n    <li>\n      <button onClick={handleClick}>\n        {description}\n      </button>\n    </li>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Board } from \"./Board\";\nimport { HistoricalMove } from \"./HistoricalMove\";\nimport { MaybeNull, Hooks, HandleMouseClickFn } from \"./Types\"\n\nexport type SquareOccupant = MaybeNull<Player>;\nexport type HandleClickFn = (square: number) => () => void;\n\ntype Player = \"X\" | \"O\";\ntype Move = { squares: SquareOccupant[] };\ntype History = Move[];\n\nconst INITIAL_BOARD: SquareOccupant[] = Array(9).fill(null);\nconst CELLS: number[] = Array.from(INITIAL_BOARD.keys());\nconst LINES: Readonly<number[][]> = Object.freeze([\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n]);\n\nexport function Game(): JSX.Element {\n  const initialHistory = [{ squares: INITIAL_BOARD }];\n  const [history, setHistory]: Hooks<History> =\n    useState<History>(initialHistory);\n  const [stepNumber, setStepNumber]: Hooks<number> = useState<number>(0);\n  const [xIsNext, setXIsNext]: Hooks<boolean> = useState<boolean>(true);\n  const currentMove: Move = history[stepNumber];\n  const status: string = getStatus(currentMove, xIsNext);\n  const squares: SquareOccupant[] = currentMove.squares;\n  const moves: JSX.Element[] = history.map(renderHistoricalMove.bind(null));\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          cells={CELLS}\n          squares={squares}\n          handleClick={handleClick}\n        />\n      </div>\n      <div className=\"game-info\">\n        <div>{status}</div>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n\n  // PRIVATE\n\n  function handleClick(square: number): HandleMouseClickFn {\n    return (): void => {\n      const currentHistory: History = history.slice(0, stepNumber + 1);\n      const currentMove: Move = currentHistory[currentHistory.length - 1];\n      const squares: SquareOccupant[] = currentMove.squares.slice();\n\n      if (calculateWinner(squares) || squares[square]) {\n        return;\n      }\n      squares[square] = nextPlayer(xIsNext);\n\n      setHistory(currentHistory.concat([{ squares: squares }]));\n      setStepNumber(currentHistory.length);\n      setXIsNext((xIsNext) => !xIsNext);\n    }\n  }\n\n  function renderHistoricalMove(_move: Move, index: number): JSX.Element {\n    const handleHistoricalMoveClick: HandleMouseClickFn = jumpTo(index);\n\n    return (\n      <HistoricalMove\n        key={index}\n        move={index}\n        handleClick={handleHistoricalMoveClick}\n      />\n    );\n  }\n\n  function jumpTo(index: number): HandleMouseClickFn {\n    return (): void => {\n      setStepNumber(index);\n      setXIsNext(index % 2 === 0);\n    }\n  }\n}\n\n// PRIVATE\n\nfunction calculateWinner(squares: SquareOccupant[]): MaybeNull<Player> {\n  for (let i: number = 0, len = LINES.length; i < len; i++) {\n    const [a, b, c]: number[] = LINES[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction getStatus({ squares }: Move, xIsNext: boolean): string {\n  const winner: MaybeNull<Player> = calculateWinner(squares);\n  let status: string;\n\n  if (winner) {\n    status = `Winner: ${winner}`;\n  } else {\n    status = `Next player: ${nextPlayer(xIsNext)}`;\n  }\n\n  return status;\n}\n\nfunction nextPlayer(xIsNext: boolean): Player {\n  return xIsNext ? \"X\" : \"O\";\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Game } from \"./Game\";\n\nReactDOM.render(\n  <Game />,\n  document.getElementById(\"root\") as HTMLElement\n);\n"],"sourceRoot":""}