{"version":3,"sources":["Square.js","Row.js","Board.js","HistoricalMove.js","Game.js","index.js"],"names":["Square","handleClick","value","className","onClick","Row","props","squares","row","map","renderSquare","bind","renderSquares","square","index","key","handleSquareClick","Board","useState","cells","array","size","chunked","length","push","slice","chunk","initRows","boardRows","rows","renderBoardRow","renderBoardRows","HistoricalMove","move","description","INITIAL_BOARD","Array","fill","CELLS","keys","LINES","Object","freeze","Game","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","currentHistory","calculateWinner","nextPlayer","concat","currentState","moves","_move","handleHistoricalMoveClick","jumpTo","status","current","winner","getStatus","i","len","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.269f465c.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function Square({ handleClick, value }) {\n  return (\n    <button className=\"square\" onClick={handleClick}>\n      {value}\n    </button>\n  );\n}\n","import React from \"react\";\nimport { Square } from \"./Square\";\n\nexport function Row(props) {\n  const squares = renderSquares(props);\n\n  return (\n    <div className=\"board-row\">\n      {squares}\n    </div>\n  );\n}\n\n// PRIVATE\n\nfunction renderSquares({ row, squares, handleClick }) {\n  return row.map(renderSquare.bind(null, squares, handleClick));\n}\n\nfunction renderSquare(squares, handleClick, square, index) {\n  const key = `square-${index}`;\n  const value = squares[square];\n  const handleSquareClick = handleClick.bind(null, square);\n\n  return (\n    <Square\n      key={key}\n      value={value}\n      handleClick={handleSquareClick}\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport { Row } from \"./Row\";\n\nexport function Board(props) {\n  const [rows] = useState(initRows(props));\n  const boardRows = renderBoardRows(rows, props);\n\n  return (\n    <div>\n      {boardRows}\n    </div>\n  );\n}\n\n// PRIVATE\n\nfunction initRows({ cells }) {\n  return chunk([...cells], 3);\n}\n\nfunction chunk(array, size) {\n  const chunked = [];\n  let index = 0;\n  while (index < array.length) {\n    chunked.push(array.slice(index, size + index));\n    index += size;\n  }\n  return chunked;\n}\n\nfunction renderBoardRows(rows, props) {\n  return rows.map(renderBoardRow.bind(null, props));\n}\n\nfunction renderBoardRow({ squares, handleClick }, row, index) {\n  const key = `row-${index}`;\n\n  return (\n    <Row\n      key={key}\n      row={row}\n      squares={squares}\n      handleClick={handleClick}\n    />\n  );\n}\n","import React from \"react\";\n\nexport function HistoricalMove({ move, handleClick }) {\n  const description = move ? \"Go to move #\" + move : \"Go to game start\";\n\n  return (\n    <li>\n      <button onClick={handleClick}>\n        {description}\n      </button>\n    </li>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Board } from \"./Board\";\nimport { HistoricalMove } from \"./HistoricalMove\";\n\nconst INITIAL_BOARD = Array(9).fill(null);\nconst CELLS = INITIAL_BOARD.keys();\nconst LINES = Object.freeze([\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n]);\n\nexport function Game(props) {\n  const [history, setHistory] = useState([{ squares: INITIAL_BOARD }]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXIsNext] = useState(true);\n  const handleClick = setHandleClick.bind(null, history, stepNumber, xIsNext);\n  const currentState = history[stepNumber];\n  const moves = history.map(renderHistoricalMove.bind(null));\n  const status = getStatus(currentState, xIsNext);\n  const squares = currentState.squares;\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          squares={squares}\n          cells={CELLS}\n          handleClick={handleClick}\n        />\n      </div>\n      <div className=\"game-info\">\n        <div>{status}</div>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n\n  // PRIVATE\n\n  function setHandleClick(history, stepNumber, xIsNext, square) {\n    const currentHistory = history.slice(0, stepNumber + 1);\n    const currentState = currentHistory[currentHistory.length - 1];\n    const squares = currentState.squares.slice();\n\n    if (calculateWinner(squares) || squares[square]) {\n      return;\n    }\n    squares[square] = nextPlayer(xIsNext);\n\n    setHistory(currentHistory.concat([{ squares: squares }]));\n    setStepNumber(currentHistory.length);\n    setXIsNext(!xIsNext);\n  }\n\n  function renderHistoricalMove(_move, index) {\n    const handleHistoricalMoveClick = jumpTo.bind(null, index)\n\n    return (\n      <HistoricalMove\n        key={index}\n        move={index}\n        handleClick={handleHistoricalMoveClick}\n      />\n    );\n  }\n\n  function jumpTo(index) {\n    setStepNumber(index);\n    setXIsNext(index % 2 === 0);\n  }\n}\n\n// PRIVATE\n\nfunction calculateWinner(squares) {\n  for (let i = 0, len = LINES.length; i < len; i++) {\n    const [a, b, c] = LINES[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction getStatus(current, xIsNext) {\n  const winner = calculateWinner(current.squares);\n  let status;\n\n  if (winner) {\n    status = `Winner: ${winner}`;\n  } else {\n    status = `Next player: ${nextPlayer(xIsNext)}`;\n  }\n\n  return status;\n}\n\nfunction nextPlayer(xIsNext) {\n  return xIsNext ? \"X\" : \"O\";\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Game } from \"./Game\";\n\nReactDOM.render(\n  <Game />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}