{"version":3,"sources":["Square.js","Row.js","Board.js","HistoricalMove.js","Game.js","index.js"],"names":["Square","handleClick","value","className","onClick","Row","props","squares","row","map","renderSquare","bind","renderSquares","square","index","key","handleSquareClick","Board","useState","cells","array","size","chunked","length","push","slice","chunk","initRows","boardRows","rows","renderBoardRow","renderBoardRows","HistoricalMove","move","description","Game","state","history","INITIAL_BOARD","stepNumber","xIsNext","lines","LINES","i","len","a","b","c","current","status","winner","calculateWinner","nextPlayer","this","currentState","moves","renderHistoricalMove","CELLS","currentHistory","setState","concat","_move","handleHistoricalMoveClick","jumpTo","React","Component","Array","fill","keys","Object","freeze","ReactDOM","render","document","getElementById"],"mappings":"gRAEO,SAASA,EAAT,GAAyC,IAAvBC,EAAsB,EAAtBA,YAAaC,EAAS,EAATA,MACpC,OACE,4BAAQC,UAAU,SAASC,QAASH,GACjCC,GCFA,SAASG,EAAIC,GAClB,IAAMC,EAWR,YAAuD,IAA9BC,EAA6B,EAA7BA,IAAKD,EAAwB,EAAxBA,QAASN,EAAe,EAAfA,YACrC,OAAOO,EAAIC,IAAIC,EAAaC,KAAK,KAAMJ,EAASN,IAZhCW,CAAcN,GAE9B,OACE,yBAAKH,UAAU,aACZI,GAWP,SAASG,EAAaH,EAASN,EAAaY,EAAQC,GAClD,IAAMC,EAAG,iBAAaD,GAChBZ,EAAQK,EAAQM,GAChBG,EAAoBf,EAAYU,KAAK,KAAME,GAEjD,OACE,kBAACb,EAAD,CACEe,IAAKA,EACLb,MAAOA,EACPD,YAAae,ICzBZ,SAASC,EAAMX,GAAQ,IAAD,EACZY,mBAYjB,YAA8B,IAAVC,EAAS,EAATA,MAClB,OAGF,SAAeC,EAAOC,GACpB,IAAMC,EAAU,GACZR,EAAQ,EACZ,KAAOA,EAAQM,EAAMG,QACnBD,EAAQE,KAAKJ,EAAMK,MAAMX,EAAOO,EAAOP,IACvCA,GAASO,EAEX,OAAOC,EAVAI,CAAM,YAAIP,GAAQ,GAbDQ,CAASrB,IAC3BsB,EAyBR,SAAyBC,EAAMvB,GAC7B,OAAOuB,EAAKpB,IAAIqB,EAAenB,KAAK,KAAML,IA1BxByB,CAFS,oBAEazB,GAExC,OACE,6BACGsB,GAyBP,SAASE,EAAT,EAAkDtB,EAAKM,GAAQ,IAArCP,EAAoC,EAApCA,QAASN,EAA2B,EAA3BA,YAC3Bc,EAAG,cAAUD,GAEnB,OACE,kBAACT,EAAD,CACEU,IAAKA,EACLP,IAAKA,EACLD,QAASA,EACTN,YAAaA,ICxCZ,SAAS+B,EAAT,GAAgD,IAAtBC,EAAqB,EAArBA,KAAMhC,EAAe,EAAfA,YAC/BiC,EAAcD,EAAO,eAAiBA,EAAO,mBAEnD,OACE,4BACE,4BAAQ7B,QAASH,GACdiC,ICJF,IAAMC,EAAb,kDA0CE,WAAY7B,GAAQ,IAAD,8BACjB,cAAMA,IACD8B,MAAQ,CACXC,QAAS,CAAC,CACR9B,QAAS4B,EAAKG,gBAEhBC,WAAY,EACZC,SAAS,GAEX,EAAKvC,YAAc,EAAKA,YAAYU,KAAjB,gBATF,EA1CrB,iEAcyBJ,GAErB,IADA,IAAMkC,EAAQN,EAAKO,MACVC,EAAI,EAAGC,EAAMH,EAAMlB,OAAQoB,EAAIC,EAAKD,IAAK,CAAC,IAAD,cAC9BF,EAAME,GADwB,GACzCE,EADyC,KACtCC,EADsC,KACnCC,EADmC,KAEhD,GAAIxC,EAAQsC,IAAMtC,EAAQsC,KAAOtC,EAAQuC,IAAMvC,EAAQsC,KAAOtC,EAAQwC,GACpE,OAAOxC,EAAQsC,GAGnB,OAAO,OAtBX,6BAyBgBG,EAASR,GACrB,IACIS,EADEC,EAASf,EAAKgB,gBAAgBH,EAAQzC,SAS5C,OALE0C,EADEC,EACI,kBAAcA,GAEd,uBAAmBf,EAAKiB,WAAWZ,IAGpCS,IAnCX,iCAsCoBT,GAChB,OAAOA,EAAU,IAAM,QAvC3B,8CAsDY,IAAD,EACkCa,KAAKjB,MAAtCC,EADD,EACCA,QAASE,EADV,EACUA,WAAYC,EADtB,EACsBA,QACvBc,EAAejB,EAAQE,GACvBgB,EAAQlB,EAAQ5B,IAAI4C,KAAKG,qBAAqB7C,KAAK0C,OACnDJ,EAASd,EAAKc,OAAOK,EAAcd,GACnCjC,EAAU+C,EAAa/C,QAE7B,OACE,yBAAKJ,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACc,EAAD,CACEV,QAASA,EACTY,MAAOgB,EAAKsB,MACZxD,YAAaoD,KAAKpD,eAGtB,yBAAKE,UAAU,aACb,6BAAM8C,GACN,4BAAKM,OAxEf,kCAgFc1C,GAAS,IAAD,EACuBwC,KAAKjB,MAAtCC,EADU,EACVA,QAASE,EADC,EACDA,WAAYC,EADX,EACWA,QACvBkB,EAAiBrB,EAAQZ,MAAM,EAAGc,EAAa,GAE/ChC,EADemD,EAAeA,EAAenC,OAAS,GAC/BhB,QAAQkB,QAEjCU,EAAKgB,gBAAgB5C,IAAYA,EAAQM,KAG7CN,EAAQM,GAAUsB,EAAKiB,WAAWZ,GAElCa,KAAKM,SAAS,CACZtB,QAASqB,EAAeE,OAAO,CAAC,CAC9BrD,QAASA,KAEXgC,WAAYmB,EAAenC,OAC3BiB,SAAUA,OAhGhB,2CAoGuBqB,EAAO/C,GAC1B,IAAMgD,EAA4BT,KAAKU,OAAOpD,KAAK0C,KAAMvC,GAEzD,OACE,kBAACkB,EAAD,CACEjB,IAAKD,EACLmB,KAAMnB,EACNb,YAAa6D,MA3GrB,6BAgHShD,GACLuC,KAAKM,SAAS,CACZpB,WAAYzB,EACZ0B,QAAU1B,EAAQ,IAAO,QAnH/B,GAA0BkD,IAAMC,WAAnB9B,EACJG,cAAgB4B,MAAM,GAAGC,KAAK,MAD1BhC,EAEJsB,MAAQtB,EAAKG,cAAc8B,OAFvBjC,EAGJO,MAAQ2B,OAAOC,OAAO,CAC3B,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KCVXC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.328f90e0.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function Square({ handleClick, value }) {\n  return (\n    <button className=\"square\" onClick={handleClick}>\n      {value}\n    </button>\n  );\n}\n","import React from \"react\";\nimport { Square } from \"./Square\";\n\nexport function Row(props) {\n  const squares = renderSquares(props);\n\n  return (\n    <div className=\"board-row\">\n      {squares}\n    </div>\n  );\n}\n\n// PRIVATE\n\nfunction renderSquares({ row, squares, handleClick }) {\n  return row.map(renderSquare.bind(null, squares, handleClick));\n}\n\nfunction renderSquare(squares, handleClick, square, index) {\n  const key = `square-${index}`;\n  const value = squares[square];\n  const handleSquareClick = handleClick.bind(null, square);\n\n  return (\n    <Square\n      key={key}\n      value={value}\n      handleClick={handleSquareClick}\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport { Row } from \"./Row\";\n\nexport function Board(props) {\n  const [rows] = useState(initRows(props));\n  const boardRows = renderBoardRows(rows, props);\n\n  return (\n    <div>\n      {boardRows}\n    </div>\n  );\n}\n\n// PRIVATE\n\nfunction initRows({ cells }) {\n  return chunk([...cells], 3);\n}\n\nfunction chunk(array, size) {\n  const chunked = [];\n  let index = 0;\n  while (index < array.length) {\n    chunked.push(array.slice(index, size + index));\n    index += size;\n  }\n  return chunked;\n}\n\nfunction renderBoardRows(rows, props) {\n  return rows.map(renderBoardRow.bind(null, props));\n}\n\nfunction renderBoardRow({ squares, handleClick }, row, index) {\n  const key = `row-${index}`;\n\n  return (\n    <Row\n      key={key}\n      row={row}\n      squares={squares}\n      handleClick={handleClick}\n    />\n  );\n}\n","import React from \"react\";\n\nexport function HistoricalMove({ move, handleClick }) {\n  const description = move ? \"Go to move #\" + move : \"Go to game start\";\n\n  return (\n    <li>\n      <button onClick={handleClick}>\n        {description}\n      </button>\n    </li>\n  );\n}\n","import React from \"react\";\nimport { Board } from \"./Board\";\nimport { HistoricalMove } from \"./HistoricalMove\";\n\nexport class Game extends React.Component {\n  static INITIAL_BOARD = Array(9).fill(null);\n  static CELLS = Game.INITIAL_BOARD.keys();\n  static LINES = Object.freeze([\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ]);\n\n  static calculateWinner(squares) {\n    const lines = Game.LINES;\n    for (let i = 0, len = lines.length; i < len; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\n  static status(current, xIsNext) {\n    const winner = Game.calculateWinner(current.squares);\n    let status;\n\n    if (winner) {\n      status = `Winner: ${winner}`;\n    } else {\n      status = `Next player: ${Game.nextPlayer(xIsNext)}`;\n    }\n\n    return status;\n  }\n\n  static nextPlayer(xIsNext) {\n    return xIsNext ? \"X\" : \"O\";\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Game.INITIAL_BOARD\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n    };\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  render() {\n    const { history, stepNumber, xIsNext } = this.state;\n    const currentState = history[stepNumber];\n    const moves = history.map(this.renderHistoricalMove.bind(this));\n    const status = Game.status(currentState, xIsNext);\n    const squares = currentState.squares;\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={squares}\n            cells={Game.CELLS}\n            handleClick={this.handleClick}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n\n  // PRIVATE\n\n  handleClick(square) {\n    const { history, stepNumber, xIsNext } = this.state;\n    const currentHistory = history.slice(0, stepNumber + 1);\n    const currentState = currentHistory[currentHistory.length - 1];\n    const squares = currentState.squares.slice();\n\n    if (Game.calculateWinner(squares) || squares[square]) {\n      return;\n    }\n    squares[square] = Game.nextPlayer(xIsNext);\n\n    this.setState({\n      history: currentHistory.concat([{\n        squares: squares\n      }]),\n      stepNumber: currentHistory.length,\n      xIsNext: !xIsNext\n    });\n  }\n\n  renderHistoricalMove(_move, index) {\n    const handleHistoricalMoveClick = this.jumpTo.bind(this, index)\n\n    return (\n      <HistoricalMove\n        key={index}\n        move={index}\n        handleClick={handleHistoricalMoveClick}\n      />\n    );\n  }\n\n  jumpTo(index) {\n    this.setState({\n      stepNumber: index,\n      xIsNext: (index % 2) === 0\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Game } from \"./Game\";\n\nReactDOM.render(\n  <Game />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}